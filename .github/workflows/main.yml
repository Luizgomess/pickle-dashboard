name: CI Pipeline

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Cache Node.js modules
        uses: actions/cache@v3
        id: npm-cache
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci

      - name: Persist workspace
        uses: actions/upload-artifact@v3
        with:
          name: workspace
          path: |
            node_modules/
            dist/

  lint:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Download workspace
        uses: actions/download-artifact@v3
        with:
          name: workspace

      - name: Run Lint
        run: npm run lint

  test:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Download workspace
        uses: actions/download-artifact@v3
        with:
          name: workspace

      - name: Run Tests with Coverage
        run: npm run test -- --watch=false --code-coverage

      - name: Check Coverage
        run: |
          coverage=$(jq '.total.lines.pct' coverage/coverage-summary.json)
          echo "Coverage: $coverage%"
          if (( $(echo "$coverage < 80" | bc -l) )); then
            echo "Code coverage is below 80%"
            exit 1
          fi

  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Download workspace
        uses: actions/download-artifact@v3
        with:
          name: workspace

      - name: Run Build
        run: npm run build

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download workspace
        uses: actions/download-artifact@v3
        with:
          name: workspace

      - name: Deploy to Render
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        run: |
          # Assumindo que o build gera arquivos estáticos na pasta 'dist'
          # e que você já configurou o Render.com para fazer o deploy de um site estático
          echo "Deploying to Render"
          render deploy --static-site pickle-dashboard --branch master
